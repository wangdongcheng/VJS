-- http://vjspowerbi/reportsbi/report/VJSP/Novartis/Novartis%20Monthly%20Issues%20by%20Product

DECLARE @Year INT = YEAR(GETDATE());
-- Declare a table variable
DECLARE @StockAnalysis TABLE (Value VARCHAR(50));
INSERT INTO @StockAnalysis
    (Value)
VALUES
    ('GM'),
    ('O');

DECLARE @StockType TABLE (Value VARCHAR(50));
insert into @StockType
    (Value)
VALUES
    ('50STOCK'),
    ('50TENDER'),
    ('50SAMPLE');

-- This script retrieves monthly issues by product for Novartis, including sales data and stock information.
-- It aggregates sales data for the current year and the previous year, and calculates average sales and stock in months.
With
    Z
    AS
    (
        SELECT S.STKCODE, S.STKNAME, S.STK_PHYSICAL, S.STK_SORT_KEY, S.STK_SORT_KEY1, S.STK_SORT_KEY3, S.STK_RESERVE_OUT, S.STK_DO_NOT_USE, S3.STK_USRFLAG6, S3.STK_USRCHAR17,
            SUM(CASE WHEN YEAR(SM_DATE)=@Year AND MONTH(SM_DATE)=1 THEN CASE WHEN SM.SM_STATUS = 'I' THEN SM.SM_QUANTITY*-1 ELSE SM.SM_QUANTITY END ELSE 0 END) AS 'JAN',
            SUM(CASE WHEN YEAR(SM_DATE)=@Year AND MONTH(SM_DATE)=2 THEN CASE WHEN SM.SM_STATUS = 'I' THEN SM.SM_QUANTITY*-1 ELSE SM.SM_QUANTITY END ELSE 0 END) AS 'FEB',
            SUM(CASE WHEN YEAR(SM_DATE)=@Year AND MONTH(SM_DATE)=3 THEN CASE WHEN SM.SM_STATUS = 'I' THEN SM.SM_QUANTITY*-1 ELSE SM.SM_QUANTITY END ELSE 0 END) AS 'MAR',
            SUM(CASE WHEN YEAR(SM_DATE)=@Year AND MONTH(SM_DATE)=4 THEN CASE WHEN SM.SM_STATUS = 'I' THEN SM.SM_QUANTITY*-1 ELSE SM.SM_QUANTITY END ELSE 0 END) AS 'APR',
            SUM(CASE WHEN YEAR(SM_DATE)=@Year AND MONTH(SM_DATE)=5 THEN CASE WHEN SM.SM_STATUS = 'I' THEN SM.SM_QUANTITY*-1 ELSE SM.SM_QUANTITY END ELSE 0 END) AS 'MAY',
            SUM(CASE WHEN YEAR(SM_DATE)=@Year AND MONTH(SM_DATE)=6 THEN CASE WHEN SM.SM_STATUS = 'I' THEN SM.SM_QUANTITY*-1 ELSE SM.SM_QUANTITY END ELSE 0 END) AS 'JUN',
            SUM(CASE WHEN YEAR(SM_DATE)=@Year AND MONTH(SM_DATE)=7 THEN CASE WHEN SM.SM_STATUS = 'I' THEN SM.SM_QUANTITY*-1 ELSE SM.SM_QUANTITY END ELSE 0 END) AS 'JUL',
            SUM(CASE WHEN YEAR(SM_DATE)=@Year AND MONTH(SM_DATE)=8 THEN CASE WHEN SM.SM_STATUS = 'I' THEN SM.SM_QUANTITY*-1 ELSE SM.SM_QUANTITY END ELSE 0 END) AS 'AUG',
            SUM(CASE WHEN YEAR(SM_DATE)=@Year AND MONTH(SM_DATE)=9 THEN CASE WHEN SM.SM_STATUS = 'I' THEN SM.SM_QUANTITY*-1 ELSE SM.SM_QUANTITY END ELSE 0 END) AS 'SEP',
            SUM(CASE WHEN YEAR(SM_DATE)=@Year AND MONTH(SM_DATE)=10 THEN CASE WHEN SM.SM_STATUS = 'I' THEN SM.SM_QUANTITY*-1 ELSE SM.SM_QUANTITY END ELSE 0 END) AS 'OCT',
            SUM(CASE WHEN YEAR(SM_DATE)=@Year AND MONTH(SM_DATE)=11 THEN CASE WHEN SM.SM_STATUS = 'I' THEN SM.SM_QUANTITY*-1 ELSE SM.SM_QUANTITY END ELSE 0 END) AS 'NOV',
            SUM(CASE WHEN YEAR(SM_DATE)=@Year AND MONTH(SM_DATE)=12 THEN CASE WHEN SM.SM_STATUS = 'I' THEN SM.SM_QUANTITY*-1 ELSE SM.SM_QUANTITY END ELSE 0 END) AS 'DEC',
            SUM(CASE WHEN YEAR(SM_DATE)=@Year-1 AND MONTH(SM_DATE)=1 THEN CASE WHEN SM.SM_STATUS = 'I' THEN SM.SM_QUANTITY*-1 ELSE SM.SM_QUANTITY END ELSE 0 END) AS 'JANLY',
            SUM(CASE WHEN YEAR(SM_DATE)=@Year-1 AND MONTH(SM_DATE)=2 THEN CASE WHEN SM.SM_STATUS = 'I' THEN SM.SM_QUANTITY*-1 ELSE SM.SM_QUANTITY END ELSE 0 END) AS 'FEBLY',
            SUM(CASE WHEN YEAR(SM_DATE)=@Year-1 AND MONTH(SM_DATE)=3 THEN CASE WHEN SM.SM_STATUS = 'I' THEN SM.SM_QUANTITY*-1 ELSE SM.SM_QUANTITY END ELSE 0 END) AS 'MARLY',
            SUM(CASE WHEN YEAR(SM_DATE)=@Year-1 AND MONTH(SM_DATE)=4 THEN CASE WHEN SM.SM_STATUS = 'I' THEN SM.SM_QUANTITY*-1 ELSE SM.SM_QUANTITY END ELSE 0 END) AS 'APRLY',
            SUM(CASE WHEN YEAR(SM_DATE)=@Year-1 AND MONTH(SM_DATE)=5 THEN CASE WHEN SM.SM_STATUS = 'I' THEN SM.SM_QUANTITY*-1 ELSE SM.SM_QUANTITY END ELSE 0 END) AS 'MAYLY',
            SUM(CASE WHEN YEAR(SM_DATE)=@Year-1 AND MONTH(SM_DATE)=6 THEN CASE WHEN SM.SM_STATUS = 'I' THEN SM.SM_QUANTITY*-1 ELSE SM.SM_QUANTITY END ELSE 0 END) AS 'JUNLY',
            SUM(CASE WHEN YEAR(SM_DATE)=@Year-1 AND MONTH(SM_DATE)=7 THEN CASE WHEN SM.SM_STATUS = 'I' THEN SM.SM_QUANTITY*-1 ELSE SM.SM_QUANTITY END ELSE 0 END) AS 'JULLY',
            SUM(CASE WHEN YEAR(SM_DATE)=@Year-1 AND MONTH(SM_DATE)=8 THEN CASE WHEN SM.SM_STATUS = 'I' THEN SM.SM_QUANTITY*-1 ELSE SM.SM_QUANTITY END ELSE 0 END) AS 'AUGLY',
            SUM(CASE WHEN YEAR(SM_DATE)=@Year-1 AND MONTH(SM_DATE)=9 THEN CASE WHEN SM.SM_STATUS = 'I' THEN SM.SM_QUANTITY*-1 ELSE SM.SM_QUANTITY END ELSE 0 END) AS 'SEPLY',
            SUM(CASE WHEN YEAR(SM_DATE)=@Year-1 AND MONTH(SM_DATE)=10 THEN CASE WHEN SM.SM_STATUS = 'I' THEN SM.SM_QUANTITY*-1 ELSE SM.SM_QUANTITY END ELSE 0 END) AS 'OCTLY',
            SUM(CASE WHEN YEAR(SM_DATE)=@Year-1 AND MONTH(SM_DATE)=11 THEN CASE WHEN SM.SM_STATUS = 'I' THEN SM.SM_QUANTITY*-1 ELSE SM.SM_QUANTITY END ELSE 0 END) AS 'NOVLY',
            SUM(CASE WHEN YEAR(SM_DATE)=@Year-1 AND MONTH(SM_DATE)=12 THEN CASE WHEN SM.SM_STATUS = 'I' THEN SM.SM_QUANTITY*-1 ELSE SM.SM_QUANTITY END ELSE 0 END) AS 'DECLY'
        FROM STK_STOCK S
            INNER JOIN STK_STOCK3 S3 ON S.STKCODE=S3.STKCODE3
            LEFT OUTER JOIN STK_MOVEMENTS SM ON S.STKCODE=SM.SM_STOCK_CODE
        WHERE SM.SM_TYPE = 'S' AND S.STK_DO_NOT_USE=0 AND S.STK_SORT_KEY='50NOVARTIS'
            AND S3.STK_USRFLAG6=0 AND S3.STK_USRCHAR17 in (select value
            from @StockAnalysis) AND S.STK_SORT_KEY3 IN (select value
            from @StockType) AND (YEAR(SM_DATE) = @Year OR YEAR(SM_DATE) = @Year-1)
        GROUP BY S.STKCODE, S.STKNAME, S.STK_PHYSICAL, S.STK_SORT_KEY, S.STK_SORT_KEY1, S.STK_SORT_KEY3, S.STK_RESERVE_OUT, S.STK_DO_NOT_USE, S3.STK_USRFLAG6, S3.STK_USRCHAR17
    )

--Year parameter
    SELECT STKCODE, STKNAME, STK_PHYSICAL, STK_SORT_KEY, STK_SORT_KEY1, STK_SORT_KEY3, STK_RESERVE_OUT, STK_DO_NOT_USE, STK_USRFLAG6, STK_USRCHAR17, @Year AS [YEAR],
        SUM(JAN) AS 'JAN', SUM(FEB) AS 'FEB', SUM(MAR) AS 'MAR', SUM(APR) AS 'APR', SUM(MAY) AS 'MAY', SUM(JUN) AS 'JUN', SUM(JUL) AS 'JUL', SUM(AUG) AS 'AUG',
        SUM(SEP) AS 'SEP', SUM(OCT) AS 'OCT', SUM(NOV) AS 'NOV', SUM(DEC) AS 'DEC',
        CASE MONTH(GETDATE())	WHEN 1 THEN SUM(SEPLY+OCTLY+NOVLY+DECLY)/4
							WHEN 2 THEN SUM(OCTLY+NOVLY+DECLY+JAN)/4
							WHEN 3 THEN SUM(NOVLY+DECLY+JAN+FEB)/4
							WHEN 4 THEN SUM(DECLY+JAN+FEB+MAR)/4
							WHEN 5 THEN SUM(JAN+FEB+MAR+APR)/4
							WHEN 6 THEN SUM(FEB+MAR+APR+MAY)/4
							WHEN 7 THEN SUM(MAR+APR+MAY+JUN)/4
							WHEN 8 THEN SUM(APR+MAY+JUN+JUL)/4
							WHEN 9 THEN SUM(MAY+JUN+JUL+AUG)/4
							WHEN 10 THEN SUM(JUN+JUL+AUG+SEP)/4
							WHEN 11 THEN SUM(JUL+AUG+SEP+OCT)/4
							WHEN 12 THEN SUM(AUG+SEP+OCT+NOV)/4
 END AS AVG_SALES,
        CASE WHEN (CASE MONTH(GETDATE())	WHEN 1 THEN SUM(SEPLY+OCTLY+NOVLY+DECLY)/4
									WHEN 2 THEN SUM(OCTLY+NOVLY+DECLY+JAN)/4
									WHEN 3 THEN SUM(NOVLY+DECLY+JAN+FEB)/4
									WHEN 4 THEN SUM(DECLY+JAN+FEB+MAR)/4
									WHEN 5 THEN SUM(JAN+FEB+MAR+APR)/4
									WHEN 6 THEN SUM(FEB+MAR+APR+MAY)/4
									WHEN 7 THEN SUM(MAR+APR+MAY+JUN)/4
									WHEN 8 THEN SUM(APR+MAY+JUN+JUL)/4
									WHEN 9 THEN SUM(MAY+JUN+JUL+AUG)/4
									WHEN 10 THEN SUM(JUN+JUL+AUG+SEP)/4
									WHEN 11 THEN SUM(JUL+AUG+SEP+OCT)/4
									WHEN 12 THEN SUM(AUG+SEP+OCT+NOV)/4
									END)!=0 THEN STK_PHYSICAL/(CASE MONTH(GETDATE())	WHEN 1 THEN SUM(SEPLY+OCTLY+NOVLY+DECLY)/4
																						WHEN 2 THEN SUM(OCTLY+NOVLY+DECLY+JAN)/4
																						WHEN 3 THEN SUM(NOVLY+DECLY+JAN+FEB)/4
																						WHEN 4 THEN SUM(DECLY+JAN+FEB+MAR)/4
																						WHEN 5 THEN SUM(JAN+FEB+MAR+APR)/4
																						WHEN 6 THEN SUM(FEB+MAR+APR+MAY)/4
																						WHEN 7 THEN SUM(MAR+APR+MAY+JUN)/4
																						WHEN 8 THEN SUM(APR+MAY+JUN+JUL)/4
																						WHEN 9 THEN SUM(MAY+JUN+JUL+AUG)/4
																						WHEN 10 THEN SUM(JUN+JUL+AUG+SEP)/4
																						WHEN 11 THEN SUM(JUL+AUG+SEP+OCT)/4
																						WHEN 12 THEN SUM(AUG+SEP+OCT+NOV)/4
									END) ELSE 0 
	END AS StkInMts,
        NULL AS BATCH, NULL AS Qty, NULL AS ExpiryDate
    FROM Z
    GROUP BY STKCODE, STKNAME, STK_PHYSICAL,STK_SORT_KEY,STK_SORT_KEY1, STK_SORT_KEY3, STK_RESERVE_OUT, STK_DO_NOT_USE, STK_USRFLAG6, STK_USRCHAR17

UNION ALL

    --Year parameter -1
    SELECT STKCODE, STKNAME, STK_PHYSICAL, STK_SORT_KEY, STK_SORT_KEY1, STK_SORT_KEY3, STK_RESERVE_OUT, STK_DO_NOT_USE, STK_USRFLAG6, STK_USRCHAR17, @Year-1 AS [YEAR],
        SUM(JANLY) AS 'JAN', SUM(FEBLY) AS 'FEB', SUM(MARLY) AS 'MAR', SUM(APRLY) AS 'APR', SUM(MAYLY) AS 'MAY', SUM(JUNLY) AS 'JUN',
        SUM(JULLY) AS 'JUL', SUM(AUGLY) AS 'AUG', SUM(SEPLY) AS 'SEP', SUM(OCTLY) AS 'OCT', SUM(NOVLY) AS 'NOV', SUM(DECLY) AS 'DEC',
        SUM(JANLY+FEBLY+MARLY+APRLY+MAYLY+JUNLY+JULLY+AUGLY+SEPLY+OCTLY+NOVLY+DECLY)/12 AS AVG_SALES,
        0 AS StkInMts,
        NULL AS BATCH, NULL AS Qty, NULL AS ExpiryDate
    FROM Z
    GROUP BY STKCODE, STKNAME, STK_PHYSICAL,STK_SORT_KEY,STK_SORT_KEY1, STK_SORT_KEY3, STK_RESERVE_OUT, STK_DO_NOT_USE, STK_USRFLAG6, STK_USRCHAR17


UNION ALL

    SELECT STKCODE, STKNAME, STK_PHYSICAL, STK_SORT_KEY, STK_SORT_KEY1, STK_SORT_KEY3, STK_RESERVE_OUT, STK_DO_NOT_USE, STK_USRFLAG6, STK_USRCHAR17, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
        LOC_CODE, LOC_PHYSICAL, LOC_USERDATE1
    FROM (SELECT LOC_CODE, LOC_STOCK_CODE, LOC_PHYSICAL, LOC_USERDATE1
        FROM STK_LOCATION L
            INNER JOIN STK_LOCATION2 L2 ON L.LOC_STOCK_CODE=L2.LOC_STOCKCODE2 AND L.LOC_CODE=L2.LOC_CODE2
        WHERE LOC_PHYSICAL > 0) L
        INNER JOIN STK_STOCK S ON S.STKCODE=L.LOC_STOCK_CODE
        INNER JOIN STK_STOCK3 S3 ON S.STKCODE=S3.STKCODE3
        LEFT OUTER JOIN (SELECT DISTINCT SM_STOCK_CODE
        FROM STK_MOVEMENTS
        WHERE SM_TYPE = 'S' AND (YEAR(SM_DATE) = @Year OR YEAR(SM_DATE) = @Year-1)) SM ON S.STKCODE=SM.SM_STOCK_CODE
    WHERE S.STK_DO_NOT_USE=0 AND S.STK_SORT_KEY='50NOVARTIS' AND S3.STK_USRFLAG6=0
        AND S3.STK_USRCHAR17 in (select value from @StockAnalysis)
        AND S.STK_SORT_KEY3 IN (select value from @StockType);