use vjscl;
declare @stktype NVARCHAR(50);
set @stktype = '30 MPM PRODUCTS LTD.';

SELECT
  STK_SORT_KEY3 AS SUPPLIER,
  STK_SORT_KEY AS BRAND,
  STK_SORT_KEY1 AS CATEGORY,
  STK_SORT_KEY2 AS [TYPE],
  S2.STK_SUPSTKCDE1 AS SupplierCode,
  STKCODE,
  STKNAME,
  STKCODE+' | '+STKNAME AS STK_CN,
  S.STK_EC_SUP_UNIT AS UnitsPerCase,
  CASE 
    WHEN S.STK_EC_SUP_UNIT = 0 OR S.STK_EC_SUP_UNIT IS NULL THEN 0 
    ELSE STK_USRNUM1 / S.STK_EC_SUP_UNIT 
  END AS POMinQty,
  S3.STK_USRNUM4 AS MIN_STK_QTY,
  S3.STK_USRNUM5 AS MAX_STK_QTY,
  S3.STK_USRNUM6 AS UNITS_PER_PALLET,
  CAST(Z.[3M_AVG] AS INT) AS [3M_AVG],
  CAST(Z2.[12M_AVG] AS INT) AS [12M_AVG],
  CASE 
    WHEN S.STK_EC_SUP_UNIT = 0 THEN 0 
    ELSE (LOC.STK_PHYSICAL + STK_ORDER_IN) / S.STK_EC_SUP_UNIT 
  END AS CURRENT_STOCK_QTY,
  CASE 
    WHEN Z.[3M_AVG] = 0 THEN 0 
    ELSE CAST(
      CASE 
        WHEN S.STK_EC_SUP_UNIT = 0 OR S.STK_EC_SUP_UNIT IS NULL THEN 0 
        ELSE (LOC.STK_PHYSICAL + STK_ORDER_IN) / S.STK_EC_SUP_UNIT 
      END / Z.[3M_AVG] AS DECIMAL(18,2)
    ) 
  END AS CURRENT_STOCK_COVERAGE,
  CASE 
    WHEN STK_USRNUM1 = 0 OR STK_USRNUM1 IS NULL OR S.STK_EC_SUP_UNIT = 0 THEN 0 
    ELSE 
      CASE 
        WHEN FLOOR(((S3.STK_USRNUM5 * Z.[3M_AVG]) - LOC.STK_PHYSICAL - STK_ORDER_IN) 
                    / S.STK_EC_SUP_UNIT) / (STK_USRNUM1 / S.STK_EC_SUP_UNIT) < 0 
        THEN 0 
        ELSE 
          ROUND(
            FLOOR(
              ((S3.STK_USRNUM5 * Z.[3M_AVG]) - LOC.STK_PHYSICAL - STK_ORDER_IN) 
              / S.STK_EC_SUP_UNIT
            ) / (STK_USRNUM1 / S.STK_EC_SUP_UNIT), 0
          ) * (STK_USRNUM1 / S.STK_EC_SUP_UNIT)
      END 
  END AS AUTO_ORDER_QTY,
  CASE 
    WHEN STK_USRNUM1 = 0 OR STK_USRNUM1 IS NULL OR S.STK_EC_SUP_UNIT = 0 THEN 0 
    ELSE 
      CASE 
        WHEN FLOOR(
          ((S3.STK_USRNUM5 * Z.[3M_AVG]) - LOC.STK_PHYSICAL - STK_ORDER_IN)
          / S.STK_EC_SUP_UNIT
        ) / (STK_USRNUM1 / S.STK_EC_SUP_UNIT) < 0 THEN 0 
        ELSE 
          CASE 
            WHEN Z.[3M_AVG] = 0 THEN 0 
            ELSE CAST(
              (
                LOC.STK_PHYSICAL + STK_ORDER_IN + 
                ROUND(
                  FLOOR(
                    ((S3.STK_USRNUM5 * Z.[3M_AVG]) - LOC.STK_PHYSICAL - STK_ORDER_IN)
                    / S.STK_EC_SUP_UNIT
                  ) / (STK_USRNUM1 / S.STK_EC_SUP_UNIT), 0
                ) * (STK_USRNUM1 / S.STK_EC_SUP_UNIT)
              ) / Z.[3M_AVG] AS DECIMAL(18, 2)
            ) 
          END 
      END 
  END AS AUTO_ORDER_COVERAGE,
  CASE 
    WHEN STK_USRNUM1 = 0 OR STK_USRNUM1 IS NULL OR S.STK_EC_SUP_UNIT = 0 THEN 0 
    ELSE 
      CASE 
        WHEN FLOOR(
              ((S3.STK_USRNUM5 * Z.[3M_AVG]) - LOC.STK_PHYSICAL - STK_ORDER_IN)
              / S.STK_EC_SUP_UNIT
            ) / (STK_USRNUM1 / S.STK_EC_SUP_UNIT) < 0 THEN 0 
        ELSE 
          CASE 
            WHEN STK_USRNUM6 = 0 OR STK_USRNUM6 IS NULL THEN 0 
            ELSE CAST(
              ROUND(
                (
                  ROUND(
                    FLOOR(
                      ((S3.STK_USRNUM5 * Z.[3M_AVG]) - LOC.STK_PHYSICAL - STK_ORDER_IN)
                      / S.STK_EC_SUP_UNIT
                    ) / (STK_USRNUM1 / S.STK_EC_SUP_UNIT), 0
                  ) * (STK_USRNUM1 / S.STK_EC_SUP_UNIT)
                ) / STK_USRNUM6, 2
              ) AS DECIMAL(18, 2)
            )
          END 
      END 
  END AS AUTO_ORDER_PALLETS
FROM STK_STOCK S
  INNER JOIN STK_STOCK_2 S2 ON S.STKCODE = S2.STKCODE2
  INNER JOIN STK_STOCK3 S3 ON S3.STKCODE3 = S.STKCODE
  LEFT JOIN (
  SELECT
    DET_STOCK_CODE,
    SUM(
      CASE 
        WHEN S.STK_EC_SUP_UNIT = 0 OR S.STK_EC_SUP_UNIT IS NULL THEN 0
        ELSE 
          (CASE WHEN DET_TYPE = 'CRN' THEN DET_QUANTITY * -1 ELSE DET_QUANTITY END) / S.STK_EC_SUP_UNIT
      END
    ) / 3 AS [3M_AVG]
  FROM SL_PL_NL_DETAIL
    INNER JOIN STK_STOCK3 S3 ON S3.STKCODE3 = DET_STOCK_CODE
    INNER JOIN STK_STOCK S ON DET_STOCK_CODE = S.STKCODE
  WHERE 
    DET_DATE BETWEEN CAST(GETDATE() - 91 AS DATE) AND CAST(GETDATE() - 1 AS DATE)
    AND DET_TYPE IN ('INV', 'CRN')
    AND DET_LEDGER = 'SL'
    AND DET_STKSORTKEY3 = @stktype
    AND STK_USRFLAG3 = 0
    AND STK_USRFLAG2 = 1
  GROUP BY DET_STOCK_CODE
) Z ON Z.DET_STOCK_CODE = S.STKCODE
  LEFT JOIN (
  SELECT
    DET_STOCK_CODE,
    SUM(
      CASE 
        WHEN S.STK_EC_SUP_UNIT = 0 OR S.STK_EC_SUP_UNIT IS NULL THEN 0
        ELSE 
          (CASE WHEN DET_TYPE = 'CRN' THEN DET_QUANTITY * -1 ELSE DET_QUANTITY END) / S.STK_EC_SUP_UNIT
      END
    ) / 12 AS [12M_AVG]
  FROM SL_PL_NL_DETAIL
    INNER JOIN STK_STOCK3 S3 ON S3.STKCODE3 = DET_STOCK_CODE
    INNER JOIN STK_STOCK S ON DET_STOCK_CODE = S.STKCODE
  WHERE 
    DET_DATE BETWEEN CAST(GETDATE() - 366 AS DATE) AND CAST(GETDATE() - 1 AS DATE)
    AND DET_TYPE IN ('INV', 'CRN')
    AND DET_LEDGER = 'SL'
    AND DET_STKSORTKEY3 = @stktype
    AND STK_USRFLAG3 = 0
    AND STK_USRFLAG2 = 1
  GROUP BY DET_STOCK_CODE
) Z2 ON Z2.DET_STOCK_CODE = S.STKCODE
  LEFT JOIN (
  SELECT
    LOC_STOCK_CODE,
    SUM(LOC_PHYSICAL) AS STK_PHYSICAL
  FROM STK_LOCATION
  WHERE LOC_USERSORT1 NOT IN ('WHZ', 'WHY', 'WSC')
  GROUP BY LOC_STOCK_CODE
) LOC ON S.STKCODE = LOC.LOC_STOCK_CODE
WHERE 
  STK_SORT_KEY3 = @stktype
  AND STK_USRFLAG2 = 1;
