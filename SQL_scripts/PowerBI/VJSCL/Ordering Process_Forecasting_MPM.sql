declare @stktype NVARCHAR(50) = '30 MPM PRODUCTS LTD.';

SELECT
  s.STK_SORT_KEY3 AS SUPPLIER,
  s.STK_SORT_KEY AS BRAND,
  s.STK_SORT_KEY1 AS CATEGORY,
  s.STK_SORT_KEY2 AS [TYPE],
  S2.STK_SUPSTKCDE1 AS SupplierCode,
  s.STKCODE,
  s.STKNAME,
  s.STKCODE + ' | ' + s.STKNAME AS STK_CN,
  S.STK_EC_SUP_UNIT AS UnitsPerCase,
  COALESCE(s3.STK_USRNUM1 / NULLIF(S.STK_EC_SUP_UNIT, 0), 0) AS POMinQty,
  S3.STK_USRNUM4 AS MIN_STK_QTY,
  S3.STK_USRNUM5 AS MAX_STK_QTY,
  S3.STK_USRNUM6 AS UNITS_PER_PALLET,
  CAST(Z.[3M_AVG] AS INT) AS [3M_AVG],
  CAST(Z2.[12M_AVG] AS INT) AS [12M_AVG],
  COALESCE(s.stk_order_in / NULLIF(S.STK_EC_SUP_UNIT, 0), 0) AS STK_ORDER_IN,
  CASE
    WHEN S.STK_EC_SUP_UNIT = 0 THEN 0
    ELSE (LOC.STK_PHYSICAL + STK_ORDER_IN) / S.STK_EC_SUP_UNIT
  END AS CURRENT_STOCK_QTY,
  CASE
    WHEN Z.[3M_AVG] = 0 THEN 0
    ELSE CAST(
      CASE
        WHEN S.STK_EC_SUP_UNIT = 0
        OR S.STK_EC_SUP_UNIT IS NULL THEN 0
        ELSE (LOC.STK_PHYSICAL + STK_ORDER_IN) / S.STK_EC_SUP_UNIT
      END / Z.[3M_AVG] AS DECIMAL(18, 2)
    )
  END AS CURRENT_STOCK_COVERAGE,
  CASE
    WHEN COALESCE(s3.STK_USRNUM1, 0) = 0
    OR COALESCE (S.STK_EC_SUP_UNIT, 0) = 0 THEN 0
    ELSE CASE
      WHEN (
        S3.STK_USRNUM5 * [z].[3M_AVG] * S.STK_EC_SUP_UNIT - LOC.STK_PHYSICAL - S.STK_ORDER_IN
      ) / s3.STK_USRNUM1 < 0 THEN 0
      ELSE ROUND(
        (
          S3.STK_USRNUM5 * [z].[3M_AVG] * S.STK_EC_SUP_UNIT - LOC.STK_PHYSICAL - S.STK_ORDER_IN
        ) / s3.STK_USRNUM1 / S.STK_EC_SUP_UNIT,
        0
      ) * s3.STK_USRNUM1
    END
  END AS AUTO_ORDER_QTY,
  CASE
    WHEN s3.STK_USRNUM1 = 0
    OR s3.STK_USRNUM1 IS NULL
    OR S.STK_EC_SUP_UNIT = 0 THEN 0
    ELSE CASE
      WHEN FLOOR (
        (
          (S3.STK_USRNUM5 * Z.[3M_AVG] * S.STK_EC_SUP_UNIT) - LOC.STK_PHYSICAL - s.STK_ORDER_IN
        )
      ) / s3.STK_USRNUM1 < 0 THEN 0
      ELSE CASE
        WHEN Z.[3M_AVG] = 0 THEN 0
        ELSE CAST (
          (
            LOC.STK_PHYSICAL + s.STK_ORDER_IN + ROUND (
              FLOOR (
                (
                  (S3.STK_USRNUM5 * Z.[3M_AVG] * S.STK_EC_SUP_UNIT) - LOC.STK_PHYSICAL - s.STK_ORDER_IN
                )
              ) / s3.STK_USRNUM1,
              0
            ) * s3.STK_USRNUM1
          ) / (Z.[3M_AVG] * S.STK_EC_SUP_UNIT) AS DECIMAL (18, 2)
        )
      END
    END
  END AS AUTO_ORDER_COVERAGE,
  CASE
    WHEN s3.STK_USRNUM1 = 0
    OR s3.STK_USRNUM1 IS NULL
    OR S.STK_EC_SUP_UNIT = 0 THEN 0
    ELSE CASE
      WHEN FLOOR (
        (
          (S3.STK_USRNUM5 * Z.[3M_AVG] * S.STK_EC_SUP_UNIT) - LOC.STK_PHYSICAL - s.STK_ORDER_IN
        )
      ) / s3.STK_USRNUM1 < 0 THEN 0
      ELSE CASE
        WHEN s3.STK_USRNUM6 = 0
        OR s3.STK_USRNUM6 IS NULL THEN 0
        ELSE CAST (
          ROUND (
            (
              ROUND (
                FLOOR (
                  (
                    (S3.STK_USRNUM5 * Z.[3M_AVG] * S.STK_EC_SUP_UNIT) - LOC.STK_PHYSICAL -s.STK_ORDER_IN
                  )
                ) / s3.STK_USRNUM1,
                0
              ) * s3.STK_USRNUM1
            ) / s3.STK_USRNUM6,
            2
          ) AS DECIMAL (18, 2)
        )
      END
    END
  END AS AUTO_ORDER_PALLETS
FROM
  STK_STOCK S
  INNER JOIN STK_STOCK_2 S2 ON S.STKCODE = S2.STKCODE2
  INNER JOIN STK_STOCK3 S3 ON S3.STKCODE3 = S.STKCODE
  LEFT JOIN (
    SELECT
      det.DET_STOCK_CODE,
      SUM(
        CASE
          WHEN S.STK_EC_SUP_UNIT = 0
          OR S.STK_EC_SUP_UNIT IS NULL THEN 0
          ELSE (
            CASE
              WHEN DET_TYPE = 'CRN' THEN det.DET_QUANTITY * -1
              ELSE DET_QUANTITY
            END
          ) / S.STK_EC_SUP_UNIT
        END
      ) / 3 AS [3M_AVG]
    FROM
      SL_PL_NL_DETAIL det
      INNER JOIN STK_STOCK3 S3 ON S3.STKCODE3 = det.DET_STOCK_CODE
      INNER JOIN STK_STOCK S ON det.DET_STOCK_CODE = S.STKCODE
    WHERE
      det.DET_DATE BETWEEN CAST(GETDATE() - 91 AS DATE)
      AND CAST(GETDATE() - 1 AS DATE)
      AND det.DET_TYPE IN ('INV', 'CRN')
      AND det.DET_LEDGER = 'SL'
      AND det.DET_STKSORTKEY3 = @stktype
      AND s3.STK_USRFLAG3 = 0
      AND s3.STK_USRFLAG2 = 1
    GROUP BY
      det.DET_STOCK_CODE
  ) Z ON Z.DET_STOCK_CODE = S.STKCODE
  LEFT JOIN (
    SELECT
      det.DET_STOCK_CODE,
      SUM(
        CASE
          WHEN S.STK_EC_SUP_UNIT = 0
          OR S.STK_EC_SUP_UNIT IS NULL THEN 0
          ELSE (
            CASE
              WHEN det.DET_TYPE = 'CRN' THEN det.DET_QUANTITY * -1
              ELSE det.DET_QUANTITY
            END
          ) / S.STK_EC_SUP_UNIT
        END
      ) / 12 AS [12M_AVG]
    FROM
      SL_PL_NL_DETAIL det
      INNER JOIN STK_STOCK3 S3 ON S3.STKCODE3 = det.DET_STOCK_CODE
      INNER JOIN STK_STOCK S ON det.DET_STOCK_CODE = S.STKCODE
    WHERE
      det.DET_DATE BETWEEN CAST(GETDATE() - 366 AS DATE)
      AND CAST(GETDATE() - 1 AS DATE)
      AND det.DET_TYPE IN ('INV', 'CRN')
      AND det.DET_LEDGER = 'SL'
      AND det.DET_STKSORTKEY3 = @stktype
      AND s3.STK_USRFLAG3 = 0
      AND s3.STK_USRFLAG2 = 1
    GROUP BY
      det.DET_STOCK_CODE
  ) Z2 ON Z2.DET_STOCK_CODE = S.STKCODE
  LEFT JOIN (
    SELECT
      LOC_STOCK_CODE,
      SUM(LOC_PHYSICAL) AS STK_PHYSICAL
    FROM
      STK_LOCATION
    WHERE
      LOC_USERSORT1 NOT IN ('WHZ', 'WHY', 'WSC')
    GROUP BY
      LOC_STOCK_CODE
  ) LOC ON S.STKCODE = LOC.LOC_STOCK_CODE
WHERE
  STK_SORT_KEY3 = @stktype
  AND STK_USRFLAG2 = 1;